
(*
let main () =
  let db = create_connection () in

  (* Execute a simple SQL command to create_connectionte a table *)
  let res = exec db "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT NOT NULL)" in print_endline handle_exception res; 

  (* Insert data into the table *)
  let res = db "INSERT INTO users (name) VALUES ('John Doe')" in print_endline handle_exception res;
  (* Query the data *)
  let select_stmt = db_prepare db "SELECT * FROM users" in
  while db_step select_stmt = ROW do
    Printf.printf "User ID: %d, Name: %s\n"
      (db_column_int select_stmt 0)
      (db_column_text select_stmt 1)
  done;

  (* Close the database connection *)
  db_close db

(* Run the main function *)
let () = main ()
*)

(*this is an expection that I declared*)
(*
exception Dummy

let create_one_table sql i db =
  try
    printf "%d %s\n%!" i sql;
    match exec db sql ~cb:(fun _ _ -> print_endline "???") with
    | Rc.OK -> ()
    | Rc.ERROR -> printf "Identified error: %s\n" (errmsg db)
    | _ -> assert false
  with xcp -> print_endline (Printexc.to_string xcp);;

let rec create_n_tables db tmpl i n = if i < n then
  let scrpt = sprintf tmpl i
  in
  (create_one_table scrpt i db);
  create_n_tables db tmpl (i+1) n else ();;

let () =
  let db = db_open "this.db" in
  create_n_tables db  "CREATE TABLE TBL%d (a varchar(1), b INTEGER, c FLOAT)" 0 10;
  create_n_tables db "SYNTACTICALLY INCORRECT SQL STATEMENT %d" 0 3;
  let sql = sprintf "SELECT * FROM tbl0" in
  for _i = 0 to 3 do
    try
      print_endline "TESTING!";
      match
        exec db sql ~cb:(fun _ _ -> print_endline "FOUND!"; raise Dummy)
      with
      | Rc.OK -> print_endline "OK"
      | _ -> assert false
    with xcp -> print_endline (Printexc.to_string xcp)
  done
*)

(*
open Caqti_sql
open Caqti_lwt
open Opium
open Lwt
*)

[@@@ocaml.warning "-32-27-33"]
open Sqlite3
open Printf
open Opium

let create_connection () = 
  let db = db_open "mydatabase.db" in
  db;;

let handle_exception res = 
  if Rc.is_success res  then "Done!" else Rc.to_string res;



(*Database schema + other stuffs*)



module Person = struct
  type t =
    { name : string
    ; age : int
    }

  let yojson_of_t t = `Assoc [ "name", `String t.name; "age", `Int t.age ]

  let t_of_yojson yojson =
    match yojson with
    | `Assoc [ ("name", `String name); ("age", `Int age) ] -> { name; age }
    | _ -> failwith "invalid person json"
  ;;
end

let print_person_handler req =
  let name = Router.param req "name" in
  let age = Router.param req "age" |> int_of_string in
  let person = { name; age } |> Person.yojson_of_t in
  Lwt.return (Response.of_json person)
;;

let update_person_handler req =
  let open Lwt.Syntax in
  let+ json = Request.to_json_exn req in
  let person = Person.t_of_yojson json in
  Logs.info (fun m -> m "Received person: %s" person.Person.name);
  Response.of_json (`Assoc [ "message", `String "Person saved" ])
;;

let streaming_handler req =
  let length = Body.length req.Request.body in
  let content = Body.to_stream req.Request.body in
  let body = Lwt_stream.map String.uppercase_ascii content in
  Response.make ~body:(Body.of_stream ?length body) () |> Lwt.return
;;

let print_param_handler req =
  Printf.sprintf "Hello, %s\n" (Router.param req "name")
  |> Response.of_plain_text
  |> Lwt.return
;;

let _ =
  App.empty
  |> App.post "/hello/stream" streaming_handler
  |> App.get "/hello/:name" print_param_handler
  |> App.get "/person/:name/:age" print_person_handler
  |> App.patch "/person" update_person_handler
  |> App.run_command
;;

